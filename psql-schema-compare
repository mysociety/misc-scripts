#!/bin/bash
#
# psql-schema-compare:
# Compare a schema in a text file with the schema in a live database.
# 
# Parameters are:
# $1 - schema SQL file
# $2 - unix user who can access the live db
# $3 - pgsql db name
# $4 - pgsql db user
# $5 - pgsql db pass
# $6 - pgsql db host
# $7 - pgsql db port
#
# If the schemas differ, prints a message to standard error and exits with 1.
# If they are the same, quietly exits with code 0.
#
# Copyright (c) 2005 UK Citizens Online Democracy. All rights reserved.
# Email: francis@mysociety.org; WWW: http://www.mysociety.org/
#

set -e
. ../shlib/deployfns

# XXX use of mktemp here not safe; should make a temporary directory
CVS_SCHEMA_FILE=`mktemp /tmp/ms-deploy-cvsschema.XXXXXX`
CURRENT_SCHEMA_FILE=`mktemp /tmp/ms-deploy-currentschema.XXXXXX`
PSQL_SCHEMATEST_USER=postgres

# load file schema into a temporary place to dump it
# in the same format as ...
su $PSQL_SCHEMATEST_USER -c "dropdb -q schematest" || warn "schematest already dropped, continuing"
su $PSQL_SCHEMATEST_USER -c "createdb -q schematest"
su $PSQL_SCHEMATEST_USER -c "psql --file=$1 -q schematest" 2>&1 | grep -v "will create implicit" && echo -n 
su $PSQL_SCHEMATEST_USER -c "pg_dump --schema-only --schema=public -s schematest" | egrep -v "^--|SET SESSION AUTHORIZATION|\\connect - |GRANT ALL|REVOKE ALL|START WITH 1" | grep -v "SET search_path = public, pg_catalog;" | sed "s/,$//;" | grep -v '^[ \t]*$' > $CVS_SCHEMA_FILE

# ... the live database dump
export PGPASSWORD=$5
su $2 -c "pg_dump --schema-only --schema=public -U $4 --host $6 --port $7 $3" | egrep -v "^--|SET SESSION AUTHORIZATION|\\connect - |GRANT ALL|REVOKE ALL|START WITH 1" | grep -v "SET search_path = public, pg_catalog;" | sed "s/,$//;" | grep -v '^[ \t]*$' > $CURRENT_SCHEMA_FILE

# Note:  Using sort here is completely evil.  It is because
# older verions of pg_dump don't output the tables in a stable
# order.  The above code would get confused it a column was moved
# from one table to another with no other changes.  Hopefully this
# is unlikely.  More recent pgsql have a fixed pg_dump.  Or a Perl
# script could be used to compare schemas.
# If you hate this send us a patch ;)  Better actually release a
# comprehensive schema comparing tool...
cat $CVS_SCHEMA_FILE | sort > $CVS_SCHEMA_FILE.sorted
cat $CURRENT_SCHEMA_FILE | sort > $CURRENT_SCHEMA_FILE.sorted

# Compare them
if ! diff -w $CURRENT_SCHEMA_FILE.sorted $CVS_SCHEMA_FILE.sorted
then
	warn "Schema in CVS differs from that in pgsql database, you need to update it"
	warn "host: $6 port: $7 database: $3; user: $4 schema: $1"
	warn "CVS sorted: $CVS_SCHEMA_FILE.sorted; current sorted: $CURRENT_SCHEMA_FILE.sorted"
	warn "CVS schema: $CVS_SCHEMA_FILE; current schema: $CURRENT_SCHEMA_FILE"
	exit 1
fi
rm $CVS_SCHEMA_FILE $CURRENT_SCHEMA_FILE


