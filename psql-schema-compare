#!/bin/bash
#
# psql-schema-compare:
# Compare a schema in a text file with the schema in a live database.
# 
# Parameters are:
# $1 - schema SQL file
# $2 - unix user who can access the live db
# $3 - pgsql db name
# $4 - pgsql db user
# $5 - pgsql db host
# $6 - pgsql db port
# You must put any password in ~/.pgpass (the command line and environment are
# insecure ways to transmit the password)
#
# If the schemas differ, prints a message to standard error and exits with 1.
# If they are the same, quietly exits with code 0.
#
# Schema files can use magic comments to include other schema files that should
# have already been loaded. This is useful for example for PostGIS. Put
# something like this comment in the schema file, see iso/db/schema.sql for a
# real example:
# -- PSQL-SCHEMA-COMPARE-INCLUDE: /usr/share/postgresql-8.3-postgis/lwpostgis.sql
#
# Copyright (c) 2005 UK Citizens Online Democracy. All rights reserved.
# Email: francis@mysociety.org; WWW: http://www.mysociety.org/
#

#set -x # debug

set -e
. ../shlib/deployfns

# Command line parameters
PARAM_SCHEMA=$1
PARAM_UNIX_USER=$2
PARAM_DB_NAME=$3
PARAM_DB_USER=$4
PARAM_DB_HOST=$5
PARAM_DB_PORT=$6

# XXX use of mktemp here not safe; should make a temporary directory
CVS_SCHEMA_FILE=`mktemp /tmp/ms-deploy-cvsschema.XXXXXX`
CURRENT_SCHEMA_FILE=`mktemp /tmp/ms-deploy-currentschema.XXXXXX`
POSTGRES=postgres
SCHEMATEST=schematest_`hostname`

# Pick most recent pg_dump available

PGDUMP=/data/mysociety/bin/latest-psql-dump

# Find any magic included files
INCLUDED_EXTRA_SCHEMAS=`grep "PSQL-SCHEMA-COMPARE-INCLUDE" $PARAM_SCHEMA | cut -d " " -f 3`

# XXX SET default_with_oids - not sure why these are varying in dump, when they look off in all the databases, ignore for now.

# load file schema into a temporary place to dump it in the same format as ...
ssh $PARAM_DB_HOST su $POSTGRES -c \""dropdb --port $PARAM_DB_PORT -q $SCHEMATEST"\" 2>&1 | grep -v "does not exist" || echo -n
ssh $PARAM_DB_HOST su $POSTGRES -c \""createdb --encoding=SQL_ASCII --port $PARAM_DB_PORT -q $SCHEMATEST"\"
cat $INCLUDED_EXTRA_SCHEMAS $PARAM_SCHEMA | ssh $PARAM_DB_HOST su $POSTGRES -c \""psql --port $PARAM_DB_PORT --file=- -q $SCHEMATEST"\" 2>&1 | egrep -v "will create implicit|NOTICE:|DETAIL:" && echo -n 
ssh $PARAM_DB_HOST su $POSTGRES -c \""$PGDUMP --port $PARAM_DB_PORT --schema-only --schema=public --encoding=UTF-8 -s $SCHEMATEST"\" | egrep -v "^--|SET SESSION AUTHORIZATION|\\connect - |GRANT ALL|REVOKE ALL|START WITH 1|OWNER TO|SET default_with_oids" | grep -v "SET search_path = public, pg_catalog;" | sed "s/,$//;" | grep -v '^[ \t]*$' > $CVS_SCHEMA_FILE
ssh $PARAM_DB_HOST su $POSTGRES -c \""dropdb --port $PARAM_DB_PORT -q $SCHEMATEST"\"

# ... the live database dump
su $PARAM_UNIX_USER -c "$PGDUMP --schema-only --schema=public --encoding=UTF-8 -U $PARAM_DB_USER --host $PARAM_DB_HOST --port $PARAM_DB_PORT $PARAM_DB_NAME" | egrep -v "^--|SET SESSION AUTHORIZATION|\\connect - |GRANT ALL|REVOKE ALL|START WITH 1|OWNER TO|SET default_with_oids" | grep -v "SET search_path = public, pg_catalog;" | sed "s/,$//;" | grep -v '^[ \t]*$' > $CURRENT_SCHEMA_FILE

# Compare them
#if [ "$PARAM_DB_PORT" = "5433" ]
#then
#    # For PostgreSQL 8.1 can just do diff of actual dumps
# XXX Grrr - no it can't, even though the tables are in the right order, column
# ordering screws it up.
#    if ! diff -u $CURRENT_SCHEMA_FILE $CVS_SCHEMA_FILE
#    then
#        warn "Schema in CVS differs from that in pgsql 8.1 database, you need to update it"
#        warn "host: $PARAM_DB_HOST port: $PARAM_DB_PORT database: $PARAM_DB_NAME; user: $PARAM_DB_USER schema: $PARAM_SCHEMA"
#        warn "CVS schema: $CVS_SCHEMA_FILE; current schema: $CURRENT_SCHEMA_FILE"
#        exit 1
#    fi
#else
    # Note:  Using sort here is completely evil.  It is because
    # older verions of pg_dump (i.e. PostgreSQL 7.4) don't output the tables in
    # a stable order.  The above code would get confused it a column was moved
    # from one table to another with no other changes.  Hopefully this is
    # unlikely.  More recent pgsql have a fixed pg_dump.  Or a Perl script
    # could be used to compare schemas. If you hate this send us a patch ;)
    # Better still, actually release a comprehensive schema comparing tool...
    cat $CVS_SCHEMA_FILE | sort > $CVS_SCHEMA_FILE.sorted
    cat $CURRENT_SCHEMA_FILE | sort > $CURRENT_SCHEMA_FILE.sorted

    if ! diff -w $CURRENT_SCHEMA_FILE.sorted $CVS_SCHEMA_FILE.sorted
    then
        warn "Schema in CVS differs from that in pgsql database, you need to update it"
        warn "host: $PARAM_DB_HOST port: $PARAM_DB_PORT database: $PARAM_DB_NAME; user: $PARAM_DB_USER schema: $PARAM_SCHEMA"
        warn "CVS sorted: $CVS_SCHEMA_FILE.sorted; current sorted: $CURRENT_SCHEMA_FILE.sorted"
        warn "CVS schema: $CVS_SCHEMA_FILE; current schema: $CURRENT_SCHEMA_FILE"
        exit 1
    fi
#fi
rm $CVS_SCHEMA_FILE $CURRENT_SCHEMA_FILE


