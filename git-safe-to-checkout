#!/bin/bash
#
# git-safe-to-merge:
# Tests if no local changes have been made to a git repository, including submodules recursively.
# 
# Parameters are:
# $1 - directory of git repository checkout
# $2 - git ref to check against - Name of ref (object name, a tag, or the remote-tracking branch name)
# in git 
#
# Copyright (c) 2009 UK Citizens Online Democracy. All rights reserved.
# Email: francis@mysociety.org; WWW: http://www.mysociety.org/
#

#set -x # debug

FULL_SCRIPT_COMMAND=$(readlink -f $0)
SCRIPT_COMMAND=$(basename $FULL_SCRIPT_COMMAND)

set -e
. $(dirname $FULL_SCRIPT_COMMAND)/../shlib/deployfns

cd $1
GIT_REF=$2

git fetch origin
git diff --exit-code || die "Error: Uncommitted changes in the working copy."
git diff --cached --exit-code || die "Error: Staged changes exist in the index."
UNTRACKED_FILES=$(git ls-files --others --directory --no-empty-directory --exclude-standard)
test -z "$UNTRACKED_FILES" || die "Error: There are untracked (and unignored files) in the repository:\n$UNTRACKED_FILES"

# Check that the current ref is contained in one of the remote tracking 
# branches after "git fetch origin" i.e. that any changes to the
# deployed repository have been pushed back to the blessed repository.
BRANCH=$(git branch -r --contains `git rev-parse $GIT_REF`)
if [ -z "$BRANCH" ] 
then
    die "Error: Changes have been made in the deploy repository that are not in the blessed repository"
fi
 
# Go through each submodule, from:
SUBMODULES=$(git submodule status | awk '{ print $2; }')
# ... to check that the remote-tracking branches are up to date:
for S in $SUBMODULES
do
    # Get the absolute path of the submodule and the current directory:
    D=$(readlink -f $S)

    # Get the version of the submodule that is committed in the remote branch:
    V=`git rev-parse $GIT_REF:$S`

    # Recursively check that the submodule is similarly
    # safe to merge:
    $FULL_SCRIPT_COMMAND $D $V

    # Now check that the submodule version in the remote branch
    # is actually available in the submodule:
    cd $S
    git show $V > /dev/null 2> /dev/null || die "Error: Submodule '$S' commit '$V' not found in `pwd` (submodule hasn't been pushed, perhaps?)"
    cd -
done


