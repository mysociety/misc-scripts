#!/bin/bash

# This script checks all the git repositories in /data/git/public/*.git 
# and /data/git/private/*.git to check that they are all configured correctly.
# It doesn't attempt to fix things, just reports any problems it finds.

GIT_VERSION=$(git --version|sed 's/^git version //')
MINIMUM_GIT_VERSION=1.6.3.3
EMAIL_PREFIX="(git) "
GIT_HANG_ERROR="fatal: The remote end hung up unexpectedly"

OUTPUT=$(mktemp)
trap "rm -f $OUTPUT" EXIT

function check_config {
    KEY=$1
    INTENDED_VALUE=$2
    CONFIGURED_VALUE=$(git config $KEY)
    if [ x$? != x0 ]
    then
        echo There was no $KEY config variable set
        echo in the repository $d
    elif [ -n "$INTENDED_VALUE" ] && [ x$CONFIGURED_VALUE != x$INTENDED_VALUE ]
    then
        echo The config value for $KEY in $d
        echo was $CONFIGURED_VALUE when it should be $INTENDED_VALUE
    fi
}

function test_header {
   echo "==== $REPOSITORY_NAME === $1"
}

function check_shared_flag {
   test_header "Checking that the repository was created --shared"
   FIND_RESULTS=$(mktemp)
   find $d -type d \! -perm -02010 -exec ls -ld {} \; > $FIND_RESULTS
   if [ -s $FIND_RESULTS ]
   then
      echo "The following directories didn't have g+s set:"
      cat $FIND_RESULTS
   fi
   rm -f $FIND_RESULTS
}

function check_group_ownership {
    GROUP=$1
    test_header "Checking that group ownership is $GROUP"
    FIND_RESULTS=$(mktemp)
    find $d ! -group $GROUP -exec ls -ld {} \; > $FIND_RESULTS
    if [ -s $FIND_RESULTS ]
    then
        echo "The following files and directories weren't group owned by $GROUP:"
        cat $FIND_RESULTS
    fi
    rm -f $FIND_RESULTS  
}

function check_no_working_tree {
    test_header "Checking that there is no working tree"
    if [ -d $d/.git ]
    then
        echo "There appears to be a .git directory under ${d}"
        echo "These repositories should have working trees."
    fi
}

function check_anonymous_access {
    test_header "Checking that git-daemon-export-ok exists"
    if [ ! -e git-daemon-export-ok ]
    then
        echo "You need to touch git-daemon-export-ok in $d"
        echo "in order to make the repository available via git-daemon"
    fi

    test_header "Checking that git daemon repository is working"
    if ! git ls-remote $REPOSITORY_GIT_DAEMON > /dev/null
    then
        echo "The repository $REPOSITORY_NAME is not exported by git-daemon"
        echo "The URL of the repository should be $REPOSITORY_GIT_DAEMON"
    fi    
}

function check_no_anonymous_access {
    test_header "Checking that git-daemon-export-ok does not exist"
    if [ -e git-daemon-export-ok ]
    then
        echo "Private repositories should not be available via git-daemon"
        echo "You need to remove git-daemon-export-ok in $d"
    fi
    
    test_header "Checking there is no git daemon repository"
    TMP_ERR=$(mktemp)
    git ls-remote $REPOSITORY_GIT_DAEMON > /dev/null 2> $TMP_ERR

    # Produce output for anything but a hang up  from the git daemon repository
    DIFF=`echo "$GIT_HANG_ERROR" | diff $TMP_ERR -`
    if [ -n "$DIFF" ]
    then
        echo "The git daemon repository $REPOSITORY_NAME did not hang up immediately"
    fi
    rm -f $TMP_ERR
}

function check_email_config_vars {
    # FIXME: find where we should retrieve the mailing list address
    # from, so that we don't have to store it in the public CVS
    # repository.  For the moment just check that something is set:
    test_header "Checking for the mailing list config"
    check_config hooks.mailinglist

    test_header "Checking for the email prefix config"
    check_config hooks.emailprefix $EMAIL_PREFIX    
}

function check_github {
    test_header "Checking that github repository is working"
    if ! git ls-remote $REPOSITORY_GITHUB > /dev/null
    then
       echo "There was no corresponding repository for $REPOSITORY_NAME on github"
       echo "It should be $REPOSITORY_GITHUB"
    fi    
}

function check_no_github {
    test_header "Checking that there is no github repository of a private repository"
    TMP_ERR=$(mktemp)
    git ls-remote $REPOSITORY_GITHUB > /dev/null 2> $TMP_ERR
 
    # Produce output for anything but a hang up from the github repository
    NO_REPO_ERROR="ERROR: mysociety/$REPOSITORY_NAME doesn't exist yet. Did you enter it correctly?"
    DIFF=`echo -e "$NO_REPO_ERROR\n$GIT_HANG_ERROR" | diff $TMP_ERR -`
    if [ -n "$DIFF" ]
    then
       echo "A request for private repository $REPOSITORY_NAME on github was not immediately hung up on"
    fi
    rm -f $TMP_ERR    
}

function check_no_non_fastword_merges {
    test_header "Checking that non-fastword merges are forbidden"
    check_config receive.denyNonFastForwards true
}

function check_post_receive_hook {
    # Get the current version of the post-receive hook from CVS, compare
    # it to the installed version.
    HOOK_FILE=$1
    test_header "Checking the post-receive hook is up to date"
    TMP_RECEIVE_HOOK=$(mktemp)
    ( cd /data/git/public/mysociety && git show master:bin/$HOOK_FILE > $TMP_RECEIVE_HOOK )
    if ! diff -u $TMP_RECEIVE_HOOK $d/hooks/post-receive
    then
        echo "$d/hooks/post-receive differed from the standard post-receive-hook $HOOK_FILE"
        echo "in version control."
    fi
    rm -f $TMP_RECEIVE_HOOK   
}

function check_master_branch_exists {
    test_header "Checking the master branch exists"
    if ! git rev-parse master > /dev/null
    then
        echo There seemed to be no master branch in $d
    fi    
}

(
    echo "==== Checking the version of git"
    if dpkg --compare-versions $GIT_VERSION lt $MINIMUM_GIT_VERSION
    then
        echo "The version of git in PATH is too old ($GIT_VERSION) -"
        echo It should be at least $MINIMUM_GIT_VERSION
    fi

    for d in /data/git/public/*.git
    do
        (
            cd $d
            
            REPOSITORY_NAME=$(basename $(readlink -f $(pwd)) | sed 's/\.git//')
            REPOSITORY_GITHUB="git@GitHub:mysociety/${REPOSITORY_NAME}.git"
            REPOSITORY_GIT_DAEMON="git://git.mysociety.org/${REPOSITORY_NAME}"

            check_shared_flag
            
            check_group_ownership 'publiccvs'

            check_no_working_tree

            check_email_config_vars

            check_anonymous_access

            check_github

            check_no_non_fastword_merges
            
            check_post_receive_hook "git-post-receive-hook"

            check_master_branch_exists
        )
    done
     
    for d in /data/git/private/*.git
    do 
        (
            cd $d
            REPOSITORY_NAME=$(basename $(readlink -f $(pwd)) | sed 's/\.git//')
            REPOSITORY_GITHUB="git@GitHub:mysociety/${REPOSITORY_NAME}.git"
            REPOSITORY_GIT_DAEMON="git://git.mysociety.org/${REPOSITORY_NAME}"
            
            check_shared_flag
            
            check_group_ownership 'privatecvs'
            
            check_no_working_tree
            
#            check_email_config_vars
            
            check_no_anonymous_access
            
            check_no_github
            
            check_no_non_fastword_merges
            
#            check_post_receive_hook "git-post-receive-hook"
            
            check_master_branch_exists
            
        )
    done  ) > $OUTPUT 2>&1



# If there are any lines of output that aren't empty or being with =, there
# was an error, so report everything:
if egrep -v '^( *$| *=)' $OUTPUT
then
    cat $OUTPUT
    exit 1
fi

exit 0

