#!/usr/bin/perl -w
#
# mysociety-create-database:
# Creates databases that are listed in vhosts.pl. Creates corresponding users
# and gives them permissions and right password. Testharness databases/users
# get the extra ownership and permissions they need.
#
# Copyright (c) 2008 UK Citizens Online Democracy. All rights reserved.
# Email: francis@mysociety.org; WWW: http://www.mysociety.org/
#

my $rcsid = ''; $rcsid .= '$Id: mysociety-create-databases,v 1.12 2012-06-26 09:31:24 ian Exp $';

package main;

use strict;
require 5.8.0;

use FindBin;
use lib "$FindBin::RealBin/../perllib";
my $mysociety_bin = $FindBin::RealBin;
my $servers_dir = "$FindBin::RealBin/../../servers";
my $mysociety_dir = "$FindBin::RealBin/../../mysociety";

use mySociety::SystemMisc qw(shell);
use mySociety::Config;

use Data::Dumper;
use DBI

our $verbose = $ENV{VERBOSE} ? 1 : 0;

#####################################################################
# General functions

sub pgpw {
    $_ = shift;
    $_ = `/data/mysociety/bin/pgpw $_`;
    s/\s+$//;
    return $_;
}

#####################################################################
# Main code

if (getpwuid($>) ne 'postgres' && getpwuid($>) ne 'root') {
    die "Please run as user root, script will be automatically run also as user postgres";
}

# Read in configuration file
our ($vhosts, $sites, $databases);
require "$servers_dir/vhosts.pl";

# Various other parameters
my $hostname = `hostname`;
chomp($hostname);

# Go through each database
my $database_configs;
foreach my $database (keys %{$databases}) {
    my $params = $databases->{$database};
    if ($params->{type} eq 'psql') {
        # Is it for our server? and we are right user?
        if ($params->{host} eq $hostname && getpwuid($>) eq 'postgres') {

            my @out;

            # Testharness databases get dropped and recreated by the test script, so
            # give them more permissions.
            my $testharness = 0;
            if ($database =~ m/testharness$/) {
                $testharness = 1;
            }

            # Connect to server
            my $dbh = DBI->connect("dbi:Pg:dbname=template1;port=$params->{port}", 'postgres', undef, { PrintWarn => 1, PrintError => 1, RaiseError => 0, AutoCommit => 1 }) || die DBI->errstr();

            # Create user with same name as database
            if (!$dbh->selectrow_array("select count(*) from pg_catalog.pg_user where usename = '$database'")) {
                my $password = pgpw($database);
                push @out, "creating user";
                $dbh->do("create user \"$database\" with password '$password'");
            }

            # Create database
            if (!$dbh->selectrow_array("select count(*) from pg_catalog.pg_database where datname = '$database'")) {
                push @out, "creating db";
                my $owner_clause = "";
                if ($testharness) {
                    $owner_clause = "owner \"$database\"" 
                }
                my $template_clause = '';
		my $encoding = 'UTF8';
		if ($params->{encoding}) {
		    # template1 is UTF-8, so we have to use template0 for different encodings
		    $encoding = $params->{encoding} if $params->{encoding};
		    $template_clause = ' template "template0"';
		} elsif ($params->{geo}) {
                    $template_clause = ' template "template_postgis"' if $params->{geo};
		}
                $dbh->do("create database \"$database\" $owner_clause $template_clause encoding '$encoding'");
		if ($params->{encoding}) {
		    # As we're not using template1, we have to enable PL/pgSQL for the new database
		    my $dbh_db = DBI->connect("dbi:Pg:dbname=$database;port=$params->{port}", 'postgres', undef, { PrintWarn => 1, PrintError => 1, RaiseError => 0, AutoCommit => 1 }) || die DBI->errstr();
		    $dbh_db->do("CREATE FUNCTION plpgsql_call_handler() RETURNS OPAQUE AS '\$libdir/plpgsql' LANGUAGE 'C';");
		    $dbh_db->do("CREATE TRUSTED PROCEDURAL LANGUAGE 'plpgsql' HANDLER plpgsql_call_handler LANCOMPILER 'PL/pgSQL';");
		    $dbh_db->disconnect;
		}
            }

            # Give user permissions on database
            $dbh->do("grant all on database \"$database\" to \"$database\" ");
            if ($testharness) {
                $dbh->do("alter user \"$database\" with createdb");
            }

            push @out, "no change" if $::verbose && !@out;
            print "$database (psql", ($params->{port} == 5432 ? "" : " port $params->{port}"), "): ", join('; ', @out), "\n" if @out;

        }
    } elsif ($params->{type} eq 'mysql') {
        if ($params->{host} eq $hostname && getpwuid($>) eq 'root') {
            print "mysql database '$database' on host $hostname\n" if $::verbose;

            # get the root db password
            my $root_password = pgpw('root');
            # Connect to server
            my $dbh = DBI->connect("dbi:mysql:dbname=mysql", 'root', $root_password, { PrintWarn => 1, PrintError => 1, RaiseError => 0, AutoCommit => 1 }) || die DBI->errstr();

            # Create database
            $dbh->do("create database if not exists `$database`");

            # Create user with same name as database
            my $password = pgpw($database);
            $dbh->do("grant all on `$database`.* to `$database` identified by '$password'");
        }
    } else {
        die "unknown database type '$params->{type}'";
    }
}

# Become user postgresql, and run script again to do postgresql ones
if (getpwuid($>) eq 'root') {
    # XXX yeuch, but seems easiest way to give postgres access to vhosts.pl, and postgres_secret
    chown((getpwnam("root"))[2], (getgrnam("postgres"))[2], "$servers_dir/vhosts.pl");
    chown((getpwnam("root"))[2], (getgrnam("postgres"))[2], "/etc/mysociety/postgres_secret");
    chmod(0755, '/data/mysociety/bin/pgpw');
    exit system("su postgres -c \"$0\"") >> 8;
}


