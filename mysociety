#!/bin/bash
# Shorter interface to deploy scripts on servers.
# Bash script because it uses temporary named pipes <(cmd)

SCRIPT_COMMAND=mysociety
. /data/mysociety/shlib/deployfns

# Obtain hostname
HOST=`hostname`
if [ x$HOST = x ] ; then
    die "can't establish hostname"
fi

# Set Debian version
DEBIAN_VERSION="`lsb_release -s -c`"

if [ "$HOST" = "sponge" ] ; then
   DEBIAN_VERSION="sarge"
fi

if [ "$DEBIAN_VERSION" = "sarge" ] ; then
    BASE="base"
    ARCHETYPES_DIR=""
else
    BASE="base-$DEBIAN_VERSION"
    ARCHETYPES_DIR="archetypes"
fi


# Obtain archetype
cd /data/servers
cvs -Q update serverclass
if [ ! -e /data/servers/serverclass ] ; then
    die "/data/servers/serverclass: No such file or directory"
fi
ARCHETYPES=`echo $HOST | cat - /data/servers/serverclass | \
            sed 's/#.*//' | awk '
            BEGIN { ORS=" " } {
                if (NR == 1) hostname = $1; 
                else if ($1 == hostname) print $2
            }'`
if [ "x$ARCHETYPES" = "x" ] ; then
    die "don't know archetypes for this host ($HOST), add to /data/servers/serverclass"
fi
PRINCIPAL_ARCHETYPE=`echo $ARCHETYPES | sed "s/ /\n/g" | tail --lines=1`

# Obtain list of other servers in same principal archetype
SAME_ARCHETYPE=`echo $PRINCIPAL_ARCHETYPE | cat - /data/servers/serverclass | \
    sed 's/#.*//' | awk '
    BEGIN { ORS=" " } {
        if (NR == 1) classname = $1; 
        else if ($2 == classname) print $1
    }'`

# Obtain list of other servers in BASE archetype
BASE_ARCHETYPE=`echo $BASE | cat - /data/servers/serverclass | \
    sed 's/#.*//' | awk '
    BEGIN { ORS=" " } {
        if (NR == 1) classname = $1; 
        else if ($2 == classname) print $1
    }'`

# Error reporting
die () {
    echo "mysociety:" "$@" 1>&2
    exit 1
}

show_help () {
	cat <<END
Usage: mysociety COMMAND [OPTIONS]

COMMAND is one of:
    config
        Deploy new config for current server from /data/servers/...
    vhost VHOST
        Deploy latest version of VHOST, e.g. www.pledgebank.com
    test VHOST
        Deploy, then run test script on VHOST, e.g. testharness.pet.mysociety.org

    dns
        Update the DNS configuration on the current host
    email
        Update the exim virtual mail configuration on the current host

    update
        "cvs update" all of /data/servers and /data/mysociety
    commit
        "cvs commit" all of /data/servers and /data/mysociety
    diff
        "cvs diff -u" all of /data/servers and /data/mysociety

    class COMMAND
        Run a command on all machines in the same principal class as this one
    base COMMAND
        Run a command on all machines (which are in the base class)

Extra parameters are passed through to underlying deploy-... script.
END
	exit
}

COMMAND=$1
shift || die "specify a command (try --help for help)"

set -e

case $COMMAND in
    config)
        # update and make the settings file
        SETTINGS_FILE=/etc/mysociety/config-settings.pl
        cd /data/servers
        cvs -Q update -dP $HOST.pl
        cp /data/servers/$HOST.pl $SETTINGS_FILE
        cat >>$SETTINGS_FILE <<END

            sub pgpw {
                \$_ = shift;
                \$_ = \`/data/mysociety/bin/pgpw \$_\`;
                s/\\s+\$//;
                return \$_;
            }
            
END

        # first, check existing configurations (so you see all errors from an archetype)
        if [ "$1" != "--no-check-existing" ] # XXX should check all parameters
        then
            FAILED=no
            # see if any file will be used twice, from different archetypes
            ALLFILES=`tempfile`
            for ARCHETYPE in $ARCHETYPES
            do
                cd /data/servers/$ARCHETYPES_DIR/$ARCHETYPE
                find . -type f | grep -v CVS | sed "s/.ugly//g" >> $ALLFILES
            done
            cat $ALLFILES | sort | uniq -c | sort -n | egrep -v "^      1 " > $ALLFILES.sort || echo -n
            if [ -s $ALLFILES.sort ]
            then
                echo -n "these files appear in more than one archetype out of '"
                echo -n $ARCHETYPES
                echo "': "
                cat $ALLFILES.sort
                rm -f $ALLFILES $ALLFILES.sort
                exit
            fi
            rm -f $ALLFILES $ALLFILES.sort
            # test for local changes
            for ARCHETYPE in $ARCHETYPES
            do
                cvs -Q update -dP $ARCHETYPE
                /data/mysociety/bin/deploy-configuration --check-existing --save-file=/var/lib/deploy-configuration-$ARCHETYPE.tar /data/servers/$ARCHETYPES_DIR/$ARCHETYPE $SETTINGS_FILE "$@" || FAILED=yes
            done
            # if failed, exit
            if [ "$FAILED" = "yes" ]
            then
                echo "check failed for at least one archetype, not installing files"
                exit
            fi
        fi
        # now, install everything
        for ARCHETYPE in $ARCHETYPES
        do
            /data/mysociety/bin/deploy-configuration --save-file=/var/lib/deploy-configuration-$ARCHETYPE.tar /data/servers/$ARCHETYPES_DIR/$ARCHETYPE $SETTINGS_FILE "$@"
        done
        /data/mysociety/bin/deploy-logger "Deployed configuration for archetypes \"$ARCHETYPES\" with settings \"$HOST.pl\""
        ;;
        
    vhost)
        VHOST=$1
        shift || die "specify a virtual host"
        # deploy vhost
        /data/mysociety/bin/deploy-vhost $VHOST deploy "$@"
        # special code to set up dademcron user and cron job
        if [ "$VHOST" = "services.mysociety.org" -a $( hostname ) = bitter ]; then
            /data/vhost/services.mysociety.org/mysociety/services/DaDem/bin/setup-dademcron
        fi
        ;;

    test) 
        VHOST=$1
        shift || die "specify a virtual host"
        # update code (which also does apachectl graceful, so killing
        # any FastCGI processes holding the database open, so the test script
        # can drop and reload the database)
        /data/mysociety/bin/deploy-vhost $VHOST deploy "$@"
        # launch test script
        VERBOSE=1 /data/mysociety/bin/test-site $VHOST
        ;;

    dns)
        exec /data/mysociety/bin/deploy-dns "$@"
        ;;

    email)
        exec /data/mysociety/bin/deploy-email "$@"
        ;;

    update)
        cd /data/servers
        cvs -Q update -dP
        cd /data/mysociety
        cvs -Q update -dP
        cd /data/mysociety/utils
        make --quiet
        ;;

    commit)
        cd /data/servers
        cvs -Q commit
        cd /data/mysociety
        cvs -Q commit
        ;;

    diff)
        cd /data/servers
        cvs -Q diff -u
        cd /data/mysociety
        cvs -Q diff -u
        ;;

    class)
        for X in $SAME_ARCHETYPE
        do
            echo " -- on $X..."
            ssh $X "$@" || echo " -- ...failed"
        done
        ;;

    base)
        for X in $BASE_ARCHETYPE
        do
            echo " -- on $X..."
            ssh $X "$@" || echo " -- ...failed"
        done
        ;;
    *)
	show_help
        ;;
esac

