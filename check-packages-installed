#!/bin/bash
#
# bin/check-packages-installed
# Given a file containaing a list of Debian packages, checks they are all
# installed. Prints to STDERR those that aren't, and returns an appropriate
# error code.
#
# XXX The file format is currently just a list of packages, one per line. 
# Characters after a # are interpreted as comments. It might make sense later
# to add the option of version comparison operators, preferably reusing code
# from Debian dependencies checking.
#
# Copyright (c) 2008 UK Citizens Online Democracy. All rights reserved.
# Email: francis@mysociety.org; WWW: http://www.mysociety.org/
#
# $Id: check-packages-installed,v 1.3 2008-11-10 11:44:19 root Exp $


RET=0

# Using sed as a rubbishy comment parser :)
PACKAGES=`cat $1 | sed "s/#.*$//g;"`

function check_line() {
    while read STATUS NAME REST
    do
        for PACKAGE in $PACKAGES
        do
            if [ "$PACKAGE" == "$NAME" ]
            then
                if [ "$STATUS" != "ii" ]
                then
                    echo "package '$PACKAGE' is not fully installed or has been uninstalled, status $STATUS" >&2
                    RET=1
                fi
                # mark that package as done
                PACKAGES=${PACKAGES/$PACKAGE/}
            fi
        done
    done

    # We return the variable via stdout, because you can't set variables in a
    # function called in a pipe
    echo $PACKAGES
}

COLUMNS=2000 
PACKAGES=`dpkg -l | check_line`

for PACKAGE in $PACKAGES
do
    echo "package '$PACKAGE' is not installed" >&2
    RET=1
done

exit $RET

