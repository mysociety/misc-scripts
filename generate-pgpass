#!/usr/bin/perl -w
#
# generate-pgpass:
# Creates ~/.pgpass files for users to whom it is convenient to give access to
# databases. Overwrites any existing ~/.pgpass file for the specified users.
#
# Copyright (c) 2005 UK Citizens Online Democracy. All rights reserved.
# Email: francis@mysociety.org; WWW: http://www.mysociety.org/
# 

# Who can access what databases
my $database_permissions_main = {
    # All-seeing power
    'root' => ['pb', 'ycml', 'rt', 'gaze', 'dadem', 'evel', 'mapit', 'ratty', 'fyr', 'pb-interface', 'pb-livesimply', 'pb-o2', 'pb-staging', 'mswww', 'track', 'list', 'pet', 'pet-testharness', 'donate', 'news', 'bci', 'dress', 'bbcparlvid', 'ycml-cllr', 'foi', 'survey', 'hm', 'guardian-ideabank', 'sitestats'],
     
    # People
    'francis' => ['fyr','pb','ycml','mapit','dadem','ratty','evel','pb-staging','ycml-staging','fyr-staging', 'track', 'pet-staging', 'pet', 'bci', 'dress', 'foi', 'col-francis'],
    'matthew' => ['fyr','pb','ycml','mapit','dadem','ratty','evel','pb-staging','ycml-staging','fyr-staging', 'track', 'pet-staging', 'pet', 'bci', 'bci-emptyhomes', 'dress', 'ycml-cllr', 'bbcparlvid', 'col-matthew'],
    'angie' => ['fyr','pb','ycml','mapit','dadem','ratty','evel','pb-staging','ycml-staging','fyr-staging', 'track', 'pet-staging', 'pet', 'bci', 'ycml-cllr'],
    'etienne' => ['pb-staging','ycml-staging', 'bbcparlvid'],
    'timsk' => ['pb-staging', 'pb'],
    'louise' => ['mswww-staging','mswww','news-staging', 'fyr-staging', 'donate-staging', 'news', 'fyr', 'hm-staging', 'hm', 'foi-testharness', 'foi', 'bbcparlvid', 'sitestats'],
    'adam' => ['fyr','pb','mapit','dadem','ratty','evel','fyr-staging', 'foi'],
    'debbi' => ['bci', 'fyr', 'ycml'],
    'keith' => ['mswww-staging', 'bci-matthew'],
    'skenaja' => ['foi'], # so he can do stats and stuff

     # Sites
    'pb' => ['pb','pb-staging','pb-interface'],
    'pb-livesimply' => ['pb-livesimply'],
    'pb-o2' => ['pb-o2'],
    'ycml' => ['ycml','ycml-staging'],
    'ycml-cllr' => ['ycml-cllr'],
    'fyr' => ['fyr','fyr-staging'],
    'pet' => ['pet','pet-staging'],
    'dademcron' => ['fyr', 'fyr-staging', 'rt'],
    'pet-testharness' => ['pet-testharness'],
    'mswww' => ['mswww'],
    'mswww-staging' => ['mswww-staging'],
    'mssecure' => ['donate'],
    'bci' => ['bci'],
    'bci-emptyhomes' => ['bci-emptyhomes'],
    'bbcparlvid' => ['bbcparlvid'],
    'foi' => ['foi'],
    'survey' => ['survey'],
    'hm' => ['hm'],
    'hm-staging' => ['hm-staging'],
    'ideabank' => ['guardian-ideabank'],
    'col' => ['col'],
    'sitestats' => ['sitestats'],

    # Services
    'msservices' => ['mapit','dadem','ratty','evel','news','track','gaze'],
};

my $database_permissions_balti = {
    # All-seeing power
    'root' => [],
     
    # People
    'matthew' => ['bci-matthew'],
    'louise' => ['ratty-testharness','fyr-testharness','news-testharness', 'hm-testharness'],
    'francis' => ['foi-francis'],
    'angie' => ['pb-staging'],

    # Sites
    'ycml-testharness' => ['ycml-testharness'],
    'pb-testharness' => ['pb-testharness'],
    'pet-testharness' => ['pet-testharness'],
    'pb-livesimply' => ['pb-livesimply'],
    'pet' => ['pet','pet-staging'],
    'fyrharness' => ['fyr-testharness'],
    'hm-testharness' => ['hm-testharness'],

    # Services
    'msservices-testharness' => ['mapit-testharness','dadem-testharness','ratty-testharness','evel-testharness','news-testharness'],
};

my $database_permissions_steak = {
    # All-seeing power
    'root' => ['pet'],
     
    # Sites
    'pet' => ['pet'],
    'pet-testharness' => ['pet-testharness'],
    'pet-standby' => ['pet-standby'],
};

my $database_permissions_whisky_water_peas = {
    # All-seeing power
    'root' => ['pb', 'ycml', 'rt', 'gaze', 'dadem', 'evel', 'mapit', 'ratty', 'fyr', 'pb-interface', 'pb-livesimply', 'pb-o2', 'pb-staging', 'mswww', 'track', 'list', 'pet', 'pet-testharness', 'donate', 'news', 'bci', 'dress', 'bbcparlvid', 'ycml-cllr', 'foi', 'survey', 'hm', 'guardian-ideabank', 'sitestats'],
     
    # Sites
    'pet' => ['pet'],
    'msservices' => ['gaze'],
    'fyr' => ['fyr'],
    'fyrharness' => ['fyr-testharness'],
};

my $database_permissions_hotpot = {
    # All-seeing power
    'root' => [],
     
    # Sites
    'fyr' => ['fyr'],
};

my $database_permissions;
my $server = (uname())[1];
if ($server eq 'bitter' || $server eq 'tea' || $server eq 'sponge' || $server eq 'sandwich' || $server eq 'cake' || $server eq 'pudding' || $server eq 'marmite' || $server eq 'stilton') {
	$database_permissions = $database_permissions_main;
} elsif ($server eq 'balti') {
	$database_permissions = $database_permissions_balti;
} elsif ($server eq 'whisky' || $server eq 'peas') {
	$database_permissions = $database_permissions_whisky_water_peas;
} elsif ($server eq 'steak' || $server eq 'water') {
	$database_permissions = $database_permissions_steak;
} elsif ($server eq 'hotpot') {
	$database_permissions = $database_permissions_hotpot;
} else {
	die "generate-pgpass not configured for server $server";
}

my $rcsid = ''; $rcsid .= '$Id: generate-pgpass,v 1.105 2009-06-11 11:33:49 keith Exp $';

use strict;
require 5.8.0;

use FindBin;
use lib "$FindBin::Bin/../perllib";
use POSIX;

use mySociety::TempFiles;

foreach my $user (keys %$database_permissions) {
    my @x = getpwnam($user) or die "$user: getpwnam: $!";
    my ($user_login, $user_pass, $user_uid, $user_gid) = @x;
    my $user_home = $x[7];

    my ($tmpn, $tmph) = mySociety::TempFiles::create_file_to_replace("$user_home/.pgpass") or die "open: $!";
    $tmph->print("# DO NOT EDIT - edit and rerun generate-pgpass instead\n");

    my $databases = $database_permissions->{$user};
    foreach my $database (@$databases) {
        my $password = `$FindBin::Bin/pgpw $database`;
        chomp $password;
        $tmph->print("*:*:$database:$database:$password\n") || throw Oops("$tmpn: write: $!");
    }
    $tmph->close();

    chmod 0400, $tmpn;
    chown($user_uid, $user_gid, $tmpn);

    my $dest = "$user_home/.pgpass";
    rename($tmpn, $dest);
}

