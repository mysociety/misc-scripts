#!/usr/bin/perl -w
#
# htpasswd_import_users:
# Import /etc/passwd users into an htpasswd file.
#
# Sadly this has to run as root (shadow passwords).
#
# Copyright (c) 2004 UK Citizens Online Democracy. All rights reserved.
# Email: chris@mysociety.org; WWW: http://www.mysociety.org/
#

my $rcsid = ''; $rcsid .= '$Id: htpasswd_import_users,v 1.6 2010-06-15 14:09:06 matthew Exp $';

use strict;

use Errno;
use File::Spec;
use File::stat;
use IO::File;
use Data::Dumper;
use Sys::Hostname;

die "specify location of htpasswd and htgroup file as first two arguments, additional htpasswd/htgroup to append as second two." unless (@ARGV == 4);

my $passwd_file = $ARGV[0];
my $group_file = $ARGV[1];
my $existing_passwd_file = $ARGV[2];
my $existing_group_file = $ARGV[3];

my $host = hostname;

my ($wwwdata_login, $wwwdata_pass, $wwwdata_uid, $wwwdata_gid) = getpwnam('www-data');

=item create_file_to_replace FILE

Create a file to replace the named FILE. Returns in list context a handle open
on the new file, and its name.

=cut
sub create_file_to_replace ($) {
    my ($name) = @_;

    my $st = stat($name);
    my ($v, $path, $file) = File::Spec->splitpath($name);

    for (my $i = 0; $i < 10; ++$i) {
        my $n = File::Spec->catpath($v, $path, sprintf('.%s.%08x.%08x', $file, int(rand(0xffffffff)), time()));
        my $h = new IO::File($n, O_CREAT | O_EXCL | O_WRONLY, defined($st) ? $st->mode() : 0600);
        last if (!$h and !$!{EEXIST});
        chown($wwwdata_uid, $wwwdata_gid, $n);
        return ($n, $h);
    }
    die $!;
}

# Create new password file
my ($h, $passwd_newfile);
eval {
    ($passwd_newfile, $h) = create_file_to_replace($passwd_file);

    # Find all users who are in admin- groups
    my $users;
    while (@_ = getgrent()) {
        if ($_[0] =~ m/^admin-/) {
            foreach my $user (split(/,?\s+/, $_[3])) {
                $users->{$user} = 1;
            }
        }
    }
    endgrent();

    # Write out password lines for those users
    foreach my $user (keys %$users) {
        my ($name, $passwd, $uid, $gid, $q, $c, $gcos) = getpwnam($user);
        die "[$host]: no gcos for $user" if (!$gcos);
        $gcos =~ s#,.+##;
        $h->printf("%s:%s\n", $name, $passwd) or die "$!";
    }

    # And now the additional ones
    open(FP, $existing_passwd_file) or die "$!";
    while (<FP>) {
        $h->printf($_) or die "$!";
    }

    $h->close() or die "$!";
};

if ($@) {
    unlink($passwd_newfile) if ($passwd_newfile);
    die $@;
} elsif (!rename($passwd_newfile, $passwd_file)) {
    die $!;
};

# Create new group file
my ($group_newfile);
eval {
    ($group_newfile, $h) = create_file_to_replace($group_file);

    # Write out all admin- groups in Apache's group file format
    my $users;
    while (@_ = getgrent()) {
        if ($_[0] =~ m/^admin-/) {
            $h->print("$_[0]: ");
            $h->print(join(" ", split(/,?\s+/, $_[3])));
            $h->print("\n");
        }
    }
    endgrent();

    # And now the additional ones
    open(FP, $existing_group_file) or die "$!";
    while (<FP>) {
        $h->printf($_) or die "$!";
    }

    $h->close() or die "$!";
};

if ($@) {
    unlink($group_newfile) if ($group_newfile);
    die $@;
} elsif (!rename($group_newfile, $group_file)) {
    die $!;
};

exit(0);
